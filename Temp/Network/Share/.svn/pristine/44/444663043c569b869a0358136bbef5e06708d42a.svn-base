#pragma once


namespace pt_Game_User
{

struct Req_EnterGame_U2G : IMSerialize
{
	ID_t userid; // 林籍
	DKEY_t userdkey; // 林籍
	PROTOCOL_VERSION_t protocolversion; // 林籍
	
	Req_EnterGame_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_EnterGame_U2G);
		
		userid = INVALID_ID;
		userdkey = INVALID_DKEY;
		protocolversion = INVALID_PROTOCOL_VERSION;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> userid >> userdkey >> protocolversion;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << userid << userdkey << protocolversion;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"userid : %s", userid.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"userdkey : %u", userdkey );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"protocolversion : %u", protocolversion );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_EnterGame_G2U : IMSerialize
{
	RESULT_t result; // 林籍
	USN_t usn;
	
	Ack_EnterGame_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_EnterGame_G2U);
		
		result = INVALID_RESULT;
		usn = INVALID_USN;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> usn;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << usn;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"usn : %u", usn );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Inf_KickUser_G2U : IMSerialize
{
	RESULT_t result; // 林籍
	
	Inf_KickUser_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Inf_KickUser_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_LogoutUser_U2G : IMSerialize
{
	
	Req_LogoutUser_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_LogoutUser_U2G);
		
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_LogoutUser_G2U : IMSerialize
{
	RESULT_t result; // 林籍
	
	Ack_LogoutUser_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_LogoutUser_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_MoveToLab_U2G : IMSerialize
{
	USN_t usn;
	
	Req_MoveToLab_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_MoveToLab_U2G);
		
		usn = INVALID_USN;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> usn;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << usn;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"usn : %u", usn );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_MoveToLab_G2U : IMSerialize
{
	RESULT_t result;
	
	Ack_MoveToLab_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_MoveToLab_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_PlayerList_U2G : IMSerialize
{
	
	Req_PlayerList_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_PlayerList_U2G);
		
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_PlayerList_G2U : IMSerialize
{
	RESULT_t result;
	PSN_t psn;
	NAME_t playername;
	TID_t costumeTID;
	uint8 gender;
	stCustomizeInfo customizeInfo;
	
	Ack_PlayerList_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_PlayerList_G2U);
		
		result = INVALID_RESULT;
		psn = INVALID_PSN;
		playername = INVALID_NAME;
		costumeTID = INVALID_TID;
		gender = (uint8)EWRGender::Male;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> psn >> playername >> costumeTID >> gender >> customizeInfo;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << psn << playername << costumeTID << gender << customizeInfo;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"playername : %s", playername.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"costumeTID : %d", costumeTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gender : %u", gender );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, customizeInfo, L"stCustomizeInfo" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_SelectPlayerName_U2G : IMSerialize
{
	
	Req_SelectPlayerName_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_SelectPlayerName_U2G);
		
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_SelectPlayerName_G2U : IMSerialize
{
	RESULT_t result;
	NAME_t playername;
	
	Ack_SelectPlayerName_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_SelectPlayerName_G2U);
		
		result = INVALID_RESULT;
		playername = INVALID_NAME;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> playername;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << playername;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"playername : %s", playername.c_str() );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_CreatePlayer_U2G : IMSerialize
{
	NAME_t playername;
	TID_t costumeTID;
	uint8 gender;
	stCustomizeInfo customizeInfo;
	
	Req_CreatePlayer_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_CreatePlayer_U2G);
		
		playername = INVALID_NAME;
		costumeTID = INVALID_TID;
		gender = (uint8)EWRGender::Male;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> playername >> costumeTID >> gender >> customizeInfo;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << playername << costumeTID << gender << customizeInfo;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"playername : %s", playername.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"costumeTID : %d", costumeTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gender : %u", gender );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, customizeInfo, L"stCustomizeInfo" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_CreatePlayer_G2U : IMSerialize
{
	RESULT_t result;
	PSN_t psn;
	NAME_t playername;
	TID_t costumeTID;
	uint8 gender;
	stCustomizeInfo customizeInfo;
	
	Ack_CreatePlayer_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_CreatePlayer_G2U);
		
		result = INVALID_RESULT;
		psn = INVALID_PSN;
		playername = INVALID_NAME;
		costumeTID = INVALID_TID;
		gender = (uint8)EWRGender::Male;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> psn >> playername >> costumeTID >> gender >> customizeInfo;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << psn << playername << costumeTID << gender << customizeInfo;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"playername : %s", playername.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"costumeTID : %d", costumeTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gender : %u", gender );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, customizeInfo, L"stCustomizeInfo" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_DeletePlayer_U2G : IMSerialize
{
	PSN_t psn;
	
	Req_DeletePlayer_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_DeletePlayer_U2G);
		
		psn = INVALID_PSN;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_DeletePlayer_G2U : IMSerialize
{
	RESULT_t result;
	
	Ack_DeletePlayer_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_DeletePlayer_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_SelectPlayer_U2G : IMSerialize
{
	PSN_t psn;
	
	Req_SelectPlayer_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_SelectPlayer_U2G);
		
		psn = INVALID_PSN;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_SelectPlayer_G2U : IMSerialize
{
	RESULT_t result;
	stPlayerInfo playerInfo;
	
	Ack_SelectPlayer_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_SelectPlayer_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> playerInfo;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << playerInfo;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, playerInfo, L"stPlayerInfo" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_ReserveMap_U2G : IMSerialize
{
	PSN_t psn;
	TID_t mapTID; // 捞悼窍绊磊窍绰 甘 绊蜡 牢郸胶
	TID_t mapConnectorNodeTID; // Map Connector 飘府芭 咀记 畴靛
	
	Req_ReserveMap_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_ReserveMap_U2G);
		
		psn = INVALID_PSN;
		mapTID = INVALID_TID;
		mapConnectorNodeTID = INVALID_TID;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn >> mapTID >> mapConnectorNodeTID;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn << mapTID << mapConnectorNodeTID;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapConnectorNodeTID : %d", mapConnectorNodeTID );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_ReserveMap_G2U : IMSerialize
{
	RESULT_t result;
	TID_t mapTID;
	MAP_INDEX_t mapIndex; // 柳涝窍霸 瞪 甘 绊蜡 牢郸胶
	bool bMoveToServer; // true 老版快 辑滚 捞悼 惯积
	IP_t gameServerIP; // 秦寸 甘狼 辑滚 酒捞乔
	PORT_t gameServerPort; // 秦寸 甘狼 辑滚 器飘
	TID_t mapConnectorNodeTID; // Map Connector 飘府芭 咀记 畴靛
	float destPosX; // 捞悼窍绰 甘俊辑狼 岿靛 谅钎 (X绵)
	float destPosY; // 捞悼窍绰 甘俊辑狼 岿靛 谅钎 (Y绵)
	float destPosZ; // 捞悼窍绰 甘俊辑狼 岿靛 谅钎 (Z绵)
	
	Ack_ReserveMap_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_ReserveMap_G2U);
		
		result = INVALID_RESULT;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
		bMoveToServer = false;
		gameServerIP = INVALID_IP;
		gameServerPort = INVALID_PORT;
		mapConnectorNodeTID = INVALID_TID;
		destPosX = 0.0f;
		destPosY = 0.0f;
		destPosZ = 0.0f;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> mapTID >> mapIndex >> bMoveToServer >> gameServerIP >> gameServerPort >> mapConnectorNodeTID >> destPosX >> destPosY >> destPosZ;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << mapTID << mapIndex << bMoveToServer << gameServerIP << gameServerPort << mapConnectorNodeTID << destPosX << destPosY << destPosZ;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"bMoveToServer : %d", bMoveToServer );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gameServerIP : %s", gameServerIP.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gameServerPort : %u", gameServerPort );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapConnectorNodeTID : %d", mapConnectorNodeTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"destPosX : %f", destPosX );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"destPosY : %f", destPosY );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"destPosZ : %f", destPosZ );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_ExitMap_U2G : IMSerialize
{
	PSN_t psn;
	TID_t mapTID;
	MAP_INDEX_t mapIndex; // 唱坷妨绰 甘 绊蜡 Index
	
	Req_ExitMap_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_ExitMap_U2G);
		
		psn = INVALID_PSN;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn >> mapTID >> mapIndex;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn << mapTID << mapIndex;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_ExitMap_G2U : IMSerialize
{
	RESULT_t result;
	TID_t mapTID;
	MAP_INDEX_t mapIndex; // 唱坷妨绰 甘 绊蜡 Index
	
	Ack_ExitMap_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_ExitMap_G2U);
		
		result = INVALID_RESULT;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> mapTID >> mapIndex;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << mapTID << mapIndex;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_EnterMap_U2G : IMSerialize
{
	PSN_t psn;
	TID_t mapTID;
	MAP_INDEX_t mapIndex; // 捞 甘栏肺 捞悼. 柳涝 角菩矫 俊矾
	TID_t coordinateTID; // 捞 蔼捞 粮犁窍绰 版快 CoordinateData 殿废等 困摹肺 捞悼. 傈崔窍绰 mapTID 客 悼老茄 沥焊甫 啊廉具 窃
	float posX; // 涝厘窍绰 谅钎 (X绵), coordinateTID 棺 捞 蔼捞 葛滴 0 牢 版快 扁夯 逢 利侩
	float posY; // 涝厘窍绰 谅钎 (Y绵), coordinateTID 棺 捞 蔼捞 葛滴 0 牢 版快 扁夯 逢 利侩
	float posZ; // 涝厘窍绰 谅钎 (Z绵), coordinateTID 棺 捞 蔼捞 葛滴 0 牢 版快 扁夯 逢 利侩
	float angle; // 涝厘窍绰 困摹狼 雀傈
	
	Req_EnterMap_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_EnterMap_U2G);
		
		psn = INVALID_PSN;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
		coordinateTID = INVALID_TID;
		posX = 0.0f;
		posY = 0.0f;
		posZ = 0.0f;
		angle = 0.0f;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn >> mapTID >> mapIndex >> coordinateTID >> posX >> posY >> posZ >> angle;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn << mapTID << mapIndex << coordinateTID << posX << posY << posZ << angle;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"coordinateTID : %d", coordinateTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posX : %f", posX );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posY : %f", posY );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posZ : %f", posZ );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"angle : %f", angle );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_EnterMap_G2U : IMSerialize
{
	RESULT_t result;
	TID_t mapTID;
	MAP_INDEX_t mapIndex; // 捞 甘栏肺 捞悼. 柳涝 角菩矫 俊矾
	float posX; // 谅钎 (X绵)
	float posY; // 谅钎 (Y绵)
	float posZ; // 谅钎 (Z绵)
	float angle; // 雀傈
	stSmallDateTime mapOpenTime; // 甘捞 积己等 矫埃
	stSmallDateTime curTime; // 泅犁 矫埃
	
	Ack_EnterMap_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_EnterMap_G2U);
		
		result = INVALID_RESULT;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
		posX = 0.0f;
		posY = 0.0f;
		posZ = 0.0f;
		angle = 0.0f;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> mapTID >> mapIndex >> posX >> posY >> posZ >> angle >> mapOpenTime >> curTime;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << mapTID << mapIndex << posX << posY << posZ << angle << mapOpenTime << curTime;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posX : %f", posX );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posY : %f", posY );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"posZ : %f", posZ );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"angle : %f", angle );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, mapOpenTime, L"stSmallDateTime" );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, curTime, L"stSmallDateTime" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Req_ReadyToPlay_U2G : IMSerialize
{
	PSN_t psn;
	
	Req_ReadyToPlay_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_ReadyToPlay_U2G);
		
		psn = INVALID_PSN;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Ack_ReadyToPlay_G2U : IMSerialize
{
	RESULT_t result; // 泅犁 甘 救狼 咀磐 沥焊 Inform 贸府 饶 付瘤阜栏肺 傈价
	
	Ack_ReadyToPlay_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_ReadyToPlay_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

struct Inf_ReserveMapForGroup_G2U : IMSerialize
{
	PSN_t psn; // warp 柳青窍绰 敲饭捞绢
	AID_t vehicleAID; // warp vehicle AID (况橇甫 柳青茄 按眉)
	TID_t mapTID; // 弊缝 捞悼秦具窍绰 甘 绊蜡 牢郸胶
	MAP_INDEX_t mapIndex; // 弊缝 捞悼秦具窍绰 瞪 甘 绊蜡 牢郸胶
	bool bMoveToServer; // true 老版快 辑滚 捞悼 惯积
	IP_t gameServerIP; // 秦寸 甘狼 辑滚 酒捞乔
	PORT_t gameServerPort; // 秦寸 甘狼 辑滚 器飘
	
	Inf_ReserveMapForGroup_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Inf_ReserveMapForGroup_G2U);
		
		psn = INVALID_PSN;
		vehicleAID = INVALID_AID;
		mapTID = INVALID_TID;
		mapIndex = INVALID_MAP_INDEX;
		bMoveToServer = false;
		gameServerIP = INVALID_IP;
		gameServerPort = INVALID_PORT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> psn >> vehicleAID >> mapTID >> mapIndex >> bMoveToServer >> gameServerIP >> gameServerPort;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << psn << vehicleAID << mapTID << mapIndex << bMoveToServer << gameServerIP << gameServerPort;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"psn : %u", psn );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"vehicleAID : %llu", vehicleAID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapTID : %d", mapTID );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"mapIndex : %u", mapIndex );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"bMoveToServer : %d", bMoveToServer );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gameServerIP : %s", gameServerIP.c_str() );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"gameServerPort : %u", gameServerPort );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

// 牢霸烙 立加 饶 努扼俊辑 敲饭捞绢 沥焊 夸没
struct Req_EntryInfo_U2G : IMSerialize
{
	
	Req_EntryInfo_U2G()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Req_EntryInfo_U2G);
		
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg ;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

// 牢霸烙 立加 饶 努扼俊辑 敲饭捞绢 沥焊 览翠
struct Ack_EntryInfo_G2U : IMSerialize
{
	RESULT_t result;
	stResultEntryInfo resultSub;
	
	Ack_EntryInfo_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Ack_EntryInfo_G2U);
		
		result = INVALID_RESULT;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> result >> resultSub;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << result << resultSub;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"result : %u", result );
		ADD_STRUCT_NAME_AND_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, resultSub, L"stResultEntryInfo" );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

// 酒捞袍 沥焊 府胶飘
struct Inf_EntryInfo_Item_G2U : IMSerialize
{
	std::list<stItem> listItem;
	bool bFinish;
	
	Inf_EntryInfo_Item_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_User, EGameUserType::Inf_EntryInfo_Item_G2U);
		
		listItem.clear();
		bFinish = false;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> listItem >> bFinish;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << listItem << bFinish;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_STRUCT_NAME_AND_ELEMENTS_LIST_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, listItem, L"stItem" );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"bFinish : %d", bFinish );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

// 技墨捞 酒捞袍 沥焊 舅覆
struct Inf_SekaiItemInfo_G2U : IMSerialize
{
	std::list<stSekaiItemInfo> listSekaiItemInfo;
	bool bFinish;
	
	Inf_SekaiItemInfo_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_Actor, EGameActorType::Inf_SekaiItemInfo_G2U);
		
		listSekaiItemInfo.clear();
		bFinish = false;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> listSekaiItemInfo >> bFinish;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << listSekaiItemInfo << bFinish;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_STRUCT_NAME_AND_ELEMENTS_LIST_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, listSekaiItemInfo, L"stSekaiItemInfo" );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"bFinish : %d", bFinish );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};

// 技墨捞 犁拳 沥焊 舅覆
struct Inf_SekaiCurrencyInfo_G2U : IMSerialize
{
	std::list<stSekaiCurrencyInfo> listSekaiCurrencyInfo;
	bool bFinish;
	
	Inf_SekaiCurrencyInfo_G2U()
	{
		m_Protocol = _PM::MakeProtocol( _PS::Seg_Game_Actor, EGameActorType::Inf_SekaiCurrencyInfo_G2U);
		
		listSekaiCurrencyInfo.clear();
		bFinish = false;
	}
	IMMessage& ReadMsg( IMMessage& rMsg ) override
	{
		return rMsg  >> listSekaiCurrencyInfo >> bFinish;
	}
	IMMessage& WriteMsg( IMMessage& rMsg ) override
	{
		return rMsg  << listSekaiCurrencyInfo << bFinish;
	}
	#ifdef USE_PROTOCOL_TOSTRING
	void ToString( std::deque<std::wstring>& rStrPacketMsgList, std::wstring& rStrMsg ) override
	{
		ADD_PROTOCOL_NAME_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, GetProtocolString( _PM::GetSegment( m_Protocol ), _PM::GetType( m_Protocol ) ) );
		ADD_STRUCT_NAME_AND_ELEMENTS_LIST_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, listSekaiCurrencyInfo, L"stSekaiCurrencyInfo" );
		ADD_ELEMENTS_TO_LOG_LIST( rStrPacketMsgList, rStrMsg, L"bFinish : %d", bFinish );
		
	}
	#endif	// USE_PROTOCOL_TOSTRING
};
}
