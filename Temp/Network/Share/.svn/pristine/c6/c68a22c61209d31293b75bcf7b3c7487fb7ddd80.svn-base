#pragma once

#include "ProtocolError.h"

static const wchar_t* GetErrorString(EWRError::en e)
{
	
	switch(e)
	{
	case EWRError::Success: return L"Success";
	case EWRError::Failure_SystemError: return L"Failure_SystemError"; break;
	case EWRError::Failure_DB_Not_Exist_Main_Config: return L"Failure_DB_Not_Exist_Main_Config"; break;
	case EWRError::Failure_DB_Not_Exist_Login_Config: return L"Failure_DB_Not_Exist_Login_Config"; break;
	case EWRError::Failure_DB_Not_Exist_Game_Config: return L"Failure_DB_Not_Exist_Game_Config"; break;
	case EWRError::Failure_DB_SP_Error: return L"Failure_DB_SP_Error"; break;
	case EWRError::Failure_DB_User_Already_Exist_USN: return L"Failure_DB_User_Already_Exist_USN"; break;
	case EWRError::Failure_DB_Player_Not_Exist_Player: return L"Failure_DB_Player_Not_Exist_Player"; break;
	case EWRError::Failure_DB_Player_Already_Exist_Player: return L"Failure_DB_Player_Already_Exist_Player"; break;
	case EWRError::Failure_DB_Player_Already_Exist_PlayerName: return L"Failure_DB_Player_Already_Exist_PlayerName"; break;
	case EWRError::Failure_DB_Player_Not_Exist_SelectPlayerName: return L"Failure_DB_Player_Not_Exist_SelectPlayerName"; break;
	case EWRError::Failure_Common_Register_LoginServer: return L"Failure_Common_Register_LoginServer"; break;
	case EWRError::Failure_Common_Register_GameServer: return L"Failure_Common_Register_GameServer"; break;
	case EWRError::Failure_Common_Not_Register_GameServer: return L"Failure_Common_Not_Register_GameServer"; break;
	case EWRError::Failure_Common_Non_Develop_Item: return L"Failure_Common_Non_Develop_Item"; break;
	case EWRError::Failure_Common_Developing: return L"Failure_Common_Developing"; break;
	case EWRError::Failure_Common_PacketError: return L"Failure_Common_PacketError"; break;
	case EWRError::Failure_Common_Different_Server_Protocol_Version: return L"Failure_Common_Different_Server_Protocol_Version"; break;
	case EWRError::Failure_Common_Not_Exist_User: return L"Failure_Common_Not_Exist_User"; break;
	case EWRError::Failure_Common_Already_Exist_User: return L"Failure_Common_Already_Exist_User"; break;
	case EWRError::Failure_Common_Already_Accept: return L"Failure_Common_Already_Accept"; break;
	case EWRError::Failure_Common_Already_CertifyRegistWaiting: return L"Failure_Common_Already_CertifyRegistWaiting"; break;
	case EWRError::Failure_Common_Already_InLoginServer: return L"Failure_Common_Already_InLoginServer"; break;
	case EWRError::Failure_Common_Already_MovingToGameServer: return L"Failure_Common_Already_MovingToGameServer"; break;
	case EWRError::Failure_Common_Already_InGameServer: return L"Failure_Common_Already_InGameServer"; break;
	case EWRError::Failure_Common_Not_Exist_Server: return L"Failure_Common_Not_Exist_Server"; break;
	case EWRError::Failure_Common_Previous_User_CertifyRegistWaiting: return L"Failure_Common_Previous_User_CertifyRegistWaiting"; break;
	case EWRError::Failure_Common_Previous_User_MovingToGameServer: return L"Failure_Common_Previous_User_MovingToGameServer"; break;
	case EWRError::Failure_Common_Different_User_ID: return L"Failure_Common_Different_User_ID"; break;
	case EWRError::Failure_Common_Different_User_DKey: return L"Failure_Common_Different_User_DKey"; break;
	case EWRError::Failure_Common_ExecSP: return L"Failure_Common_ExecSP"; break;
	case EWRError::Failure_Common_Send_Packet_To_MainServer: return L"Failure_Common_Send_Packet_To_MainServer"; break;
	case EWRError::Failure_Common_Not_Exist_Component_OwnerActor: return L"Failure_Common_Not_Exist_Component_OwnerActor"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Cheat: return L"Failure_Common_Not_Exist_Component_Cheat"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Quest: return L"Failure_Common_Not_Exist_Component_Quest"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Stat: return L"Failure_Common_Not_Exist_Component_Stat"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Move: return L"Failure_Common_Not_Exist_Component_Move"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Skill: return L"Failure_Common_Not_Exist_Component_Skill"; break;
	case EWRError::Failure_Common_Not_Exist_Component_AI: return L"Failure_Common_Not_Exist_Component_AI"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Inventory: return L"Failure_Common_Not_Exist_Component_Inventory"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Vehicle: return L"Failure_Common_Not_Exist_Component_Vehicle"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Currency: return L"Failure_Common_Not_Exist_Component_Currency"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Chat: return L"Failure_Common_Not_Exist_Component_Chat"; break;
	case EWRError::Failure_Common_Not_Exist_Component_Community: return L"Failure_Common_Not_Exist_Component_Community"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Map: return L"Failure_Common_Not_Exist_TableData_Map"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Item: return L"Failure_Common_Not_Exist_TableData_Item"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Quest: return L"Failure_Common_Not_Exist_TableData_Quest"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_QuestTask: return L"Failure_Common_Not_Exist_TableData_QuestTask"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Coordinate: return L"Failure_Common_Not_Exist_TableData_Coordinate"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Npc: return L"Failure_Common_Not_Exist_TableData_Npc"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_ObjectData: return L"Failure_Common_Not_Exist_TableData_ObjectData"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_SocialRecord_Animation: return L"Failure_Common_Not_Exist_TableData_SocialRecord_Animation"; break;
	case EWRError::Failure_Common_TransportRecord_Elevator_Is_Null: return L"Failure_Common_TransportRecord_Elevator_Is_Null"; break;
	case EWRError::Failure_Common_TransportRecord_Monorail_Is_Null: return L"Failure_Common_TransportRecord_Monorail_Is_Null"; break;
	case EWRError::Failure_Common_TransportRecord_Tardis_Is_Null: return L"Failure_Common_TransportRecord_Tardis_Is_Null"; break;
	case EWRError::Failure_Common_TransportRecord_FloatingBoard_Is_Null: return L"Failure_Common_TransportRecord_FloatingBoard_Is_Null"; break;
	case EWRError::Failure_Common_TransportRecord_Limit_Station_Count: return L"Failure_Common_TransportRecord_Limit_Station_Count"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_SocialRecord_Dance: return L"Failure_Common_Not_Exist_TableData_SocialRecord_Dance"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_SocialRecord_DanceGroup: return L"Failure_Common_Not_Exist_TableData_SocialRecord_DanceGroup"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_BattleField: return L"Failure_Common_Not_Exist_TableData_BattleField"; break;
	case EWRError::Failure_Common_Wrong_Range: return L"Failure_Common_Wrong_Range"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Currency: return L"Failure_Common_Not_Exist_TableData_Currency"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_DialogueData: return L"Failure_Common_Not_Exist_TableData_DialogueData"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_DialogueData_DialogueSet: return L"Failure_Common_Not_Exist_TableData_DialogueData_DialogueSet"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_DialogueData_DialogueSetGroup: return L"Failure_Common_Not_Exist_TableData_DialogueData_DialogueSetGroup"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_RewardData: return L"Failure_Common_Not_Exist_TableData_RewardData"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_LifeEventData: return L"Failure_Common_Not_Exist_TableData_LifeEventData"; break;
	case EWRError::Failure_Common_MapDataPack_Is_Null: return L"Failure_Common_MapDataPack_Is_Null"; break;
	case EWRError::Failure_Common_TriggerData_Is_Null: return L"Failure_Common_TriggerData_Is_Null"; break;
	case EWRError::Failure_Common_ActionNode_Is_Null: return L"Failure_Common_ActionNode_Is_Null"; break;
	case EWRError::Failure_Common_TransitionNode_Is_Null: return L"Failure_Common_TransitionNode_Is_Null"; break;
	case EWRError::Failure_Common_TriggerNode_Is_Null: return L"Failure_Common_TriggerNode_Is_Null"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_ShopData: return L"Failure_Common_Not_Exist_TableData_ShopData"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_ShopCatalogData: return L"Failure_Common_Not_Exist_TableData_ShopCatalogData"; break;
	case EWRError::Failure_Common_Not_Exist_TableData_Field: return L"Failure_Common_Not_Exist_TableData_Field"; break;
	case EWRError::Failure_Common_Invalid_TID: return L"Failure_Common_Invalid_TID"; break;
	case EWRError::Failure_Common_Invalid_Server_Index: return L"Failure_Common_Invalid_Server_Index"; break;
	case EWRError::Failure_Common_Invalid_USN: return L"Failure_Common_Invalid_USN"; break;
	case EWRError::Failure_Common_Invalid_PSN: return L"Failure_Common_Invalid_PSN"; break;
	case EWRError::Failure_Common_Invalid_LanguageType: return L"Failure_Common_Invalid_LanguageType"; break;
	case EWRError::Failure_Common_RegisterLoginServer: return L"Failure_Common_RegisterLoginServer"; break;
	case EWRError::Failure_Common_DeregisterLoginServer: return L"Failure_Common_DeregisterLoginServer"; break;
	case EWRError::Failure_Common_RegisterGameServer: return L"Failure_Common_RegisterGameServer"; break;
	case EWRError::Failure_Common_DeregisterGameServer: return L"Failure_Common_DeregisterGameServer"; break;
	case EWRError::Failure_Common_RegisterChatServer: return L"Failure_Common_RegisterChatServer"; break;
	case EWRError::Failure_Common_DeregisterChatServer: return L"Failure_Common_DeregisterChatServer"; break;
	case EWRError::Failure_Register_Exist_Server_Index: return L"Failure_Register_Exist_Server_Index"; break;
	case EWRError::Failure_Register_Invalid_LimitStaticGameServer: return L"Failure_Register_Invalid_LimitStaticGameServer"; break;
	case EWRError::Failure_Common_DB_Call_Error: return L"Failure_Common_DB_Call_Error"; break;
	case EWRError::Failure_Common_Not_Exist_Player: return L"Failure_Common_Not_Exist_Player"; break;
	case EWRError::Failure_Http_API_Error: return L"Failure_Http_API_Error"; break;
	case EWRError::Failure_Http_Error_Invalid_Result: return L"Failure_Http_Error_Invalid_Result"; break;
	case EWRError::Failure_Http_GoogleTranslation_Json_Parsing: return L"Failure_Http_GoogleTranslation_Json_Parsing"; break;
	case EWRError::Failure_Common_Invalid_Map_Index: return L"Failure_Common_Invalid_Map_Index"; break;
	case EWRError::Failure_Common_MapGroup_Is_Null: return L"Failure_Common_MapGroup_Is_Null"; break;
	case EWRError::Failure_Common_Map_Is_Null: return L"Failure_Common_Map_Is_Null"; break;
	case EWRError::Failure_Common_MapInfoGroup_Is_Null: return L"Failure_Common_MapInfoGroup_Is_Null"; break;
	case EWRError::Failure_Common_MapInfo_Is_Null: return L"Failure_Common_MapInfo_Is_Null"; break;
	case EWRError::Failure_Common_MapRecord_Is_Null: return L"Failure_Common_MapRecord_Is_Null"; break;
	case EWRError::Failure_Common_Sector_Is_Null: return L"Failure_Common_Sector_Is_Null"; break;
	case EWRError::Failure_Common_ListSectorIndex_Is_Null: return L"Failure_Common_ListSectorIndex_Is_Null"; break;
	case EWRError::Failure_Common_Actor_Is_Null: return L"Failure_Common_Actor_Is_Null"; break;
	case EWRError::Failure_Common_Player_Is_Null: return L"Failure_Common_Player_Is_Null"; break;
	case EWRError::Failure_Common_User_Is_Null: return L"Failure_Common_User_Is_Null"; break;
	case EWRError::Failure_Common_Invalid_ActorType: return L"Failure_Common_Invalid_ActorType"; break;
	case EWRError::Failure_Invalid_Actor_State: return L"Failure_Invalid_Actor_State"; break;
	case EWRError::Failure_Common_ActorManager_Is_Null: return L"Failure_Common_ActorManager_Is_Null"; break;
	case EWRError::Failure_Invalid_Costume_TID: return L"Failure_Invalid_Costume_TID"; break;
	case EWRError::Failure_Get_Player_Name: return L"Failure_Get_Player_Name"; break;
	case EWRError::Failure_Common_Invalid_Select_PSN: return L"Failure_Common_Invalid_Select_PSN"; break;
	case EWRError::Failure_INvalid_AI_State: return L"Failure_INvalid_AI_State"; break;
	case EWRError::Failure_Common_Invalid_VehicleAID: return L"Failure_Common_Invalid_VehicleAID"; break;
	case EWRError::Failure_Common_Vehicle_Is_Null: return L"Failure_Common_Vehicle_Is_Null"; break;
	case EWRError::Failure_ForceKick_Invalid: return L"Failure_ForceKick_Invalid"; break;
	case EWRError::Failure_ForceKick_Push: return L"Failure_ForceKick_Push"; break;
	case EWRError::Failure_ForceKick_GM: return L"Failure_ForceKick_GM"; break;
	case EWRError::Failure_ForceKick_Error: return L"Failure_ForceKick_Error"; break;
	case EWRError::Failure_ForceKick_DBError: return L"Failure_ForceKick_DBError"; break;
	case EWRError::Failure_ForceKick_Timeout: return L"Failure_ForceKick_Timeout"; break;
	case EWRError::Failure_ForceKick_Etc: return L"Failure_ForceKick_Etc"; break;
	case EWRError::Failure_ForceKick_Channel: return L"Failure_ForceKick_Channel"; break;
	case EWRError::Failure_ForceKick_ShutdownTime: return L"Failure_ForceKick_ShutdownTime"; break;
	case EWRError::Failure_ForceKick_AutoCheck: return L"Failure_ForceKick_AutoCheck"; break;
	case EWRError::Failure_ForceKick_MoveServer: return L"Failure_ForceKick_MoveServer"; break;
	case EWRError::Failure_ForceKick_AbuseMovingCheck: return L"Failure_ForceKick_AbuseMovingCheck"; break;
	case EWRError::Failure_ForceKick_HackingPacket: return L"Failure_ForceKick_HackingPacket"; break;
	case EWRError::Failure_ForceKick_SequenceNumberCheck: return L"Failure_ForceKick_SequenceNumberCheck"; break;
	case EWRError::Failure_ForceKick_Disconnect: return L"Failure_ForceKick_Disconnect"; break;
	case EWRError::Failure_ForceKick_InvalidCurrencyDetected: return L"Failure_ForceKick_InvalidCurrencyDetected"; break;
	case EWRError::Failure_ForceKick_ToolCommand: return L"Failure_ForceKick_ToolCommand"; break;
	case EWRError::Failure_Common_Not_Ready_For_Service: return L"Failure_Common_Not_Ready_For_Service"; break;
	case EWRError::Failure_Map_Create_Already_Exist_Map_Index: return L"Failure_Map_Create_Already_Exist_Map_Index"; break;
	case EWRError::Failure_Map_Create_MapGroup_Insert_Failed: return L"Failure_Map_Create_MapGroup_Insert_Failed"; break;
	case EWRError::Failure_Map_Create_MapInfoGroup_Insert_Failed: return L"Failure_Map_Create_MapInfoGroup_Insert_Failed"; break;
	case EWRError::Failure_Map_Create_Init_Failed: return L"Failure_Map_Create_Init_Failed"; break;
	case EWRError::Failure_Map_Create_MapDataPack_Is_Null: return L"Failure_Map_Create_MapDataPack_Is_Null"; break;
	case EWRError::Failure_Map_Create_TriggerManager_Init_Failed: return L"Failure_Map_Create_TriggerManager_Init_Failed"; break;
	case EWRError::Failure_Map_Create_MapRecord_Is_Null: return L"Failure_Map_Create_MapRecord_Is_Null"; break;
	case EWRError::Failure_Map_Create_JsonData_Is_Null: return L"Failure_Map_Create_JsonData_Is_Null"; break;
	case EWRError::Failure_Map_Create_Invalid_JsonData_Type: return L"Failure_Map_Create_Invalid_JsonData_Type"; break;
	case EWRError::Failure_Map_Create_MapRespawnInfo_Insert_Failed: return L"Failure_Map_Create_MapRespawnInfo_Insert_Failed"; break;
	case EWRError::Failure_Map_Create_SectorData_Is_Null: return L"Failure_Map_Create_SectorData_Is_Null"; break;
	case EWRError::Failure_Map_Create_SectorTotalCount_Is_Invalid: return L"Failure_Map_Create_SectorTotalCount_Is_Invalid"; break;
	case EWRError::Failure_Map_Create_Insert_Sector: return L"Failure_Map_Create_Insert_Sector"; break;
	case EWRError::Failure_Map_Create_ActorManager_Init_Failed: return L"Failure_Map_Create_ActorManager_Init_Failed"; break;
	case EWRError::Failure_Map_Create_TriggerVolumeCenter_Init_Failed: return L"Failure_Map_Create_TriggerVolumeCenter_Init_Failed"; break;
	case EWRError::Failure_Map_Destroy_Remove_MapGroup: return L"Failure_Map_Destroy_Remove_MapGroup"; break;
	case EWRError::Failure_Map_Destroy_Aready_Destroying: return L"Failure_Map_Destroy_Aready_Destroying"; break;
	case EWRError::Failure_Map_Destroy_In_DestroyContainer: return L"Failure_Map_Destroy_In_DestroyContainer"; break;
	case EWRError::Failure_MapInfo_Destroy_Remove_MapInfoGroup: return L"Failure_MapInfo_Destroy_Remove_MapInfoGroup"; break;
	case EWRError::Failure_MapInfo_Destroy_Aready_Destroying: return L"Failure_MapInfo_Destroy_Aready_Destroying"; break;
	case EWRError::Failure_MapInfo_Destroy_In_DestroyContainer: return L"Failure_MapInfo_Destroy_In_DestroyContainer"; break;
	case EWRError::Failure_MapData_Pack_Empty_SpawnIORecordList: return L"Failure_MapData_Pack_Empty_SpawnIORecordList"; break;
	case EWRError::Failure_MapData_Pack_Empty_SpawnENpcRecordList: return L"Failure_MapData_Pack_Empty_SpawnENpcRecordList"; break;
	case EWRError::Failure_MapData_Pack_Empty_SpawnNpcRecordList: return L"Failure_MapData_Pack_Empty_SpawnNpcRecordList"; break;
	case EWRError::Failure_Player_MoveToMap_Different_PSN: return L"Failure_Player_MoveToMap_Different_PSN"; break;
	case EWRError::Failure_Player_MoveToMap_Already_In_Map: return L"Failure_Player_MoveToMap_Already_In_Map"; break;
	case EWRError::Failure_Player_MoveToMap_Already_Make_Reservation: return L"Failure_Player_MoveToMap_Already_Make_Reservation"; break;
	case EWRError::Failure_Player_MoveToMap_Not_Found_Player: return L"Failure_Player_MoveToMap_Not_Found_Player"; break;
	case EWRError::Failure_Player_MoveToMap_Not_Found_Reservation: return L"Failure_Player_MoveToMap_Not_Found_Reservation"; break;
	case EWRError::Failure_Player_MoveToMap_Aleady_Enter_map: return L"Failure_Player_MoveToMap_Aleady_Enter_map"; break;
	case EWRError::Failure_Player_MoveToMap_DestoryMap: return L"Failure_Player_MoveToMap_DestoryMap"; break;
	case EWRError::Failure_Player_MoveToMap_Reserving: return L"Failure_Player_MoveToMap_Reserving"; break;
	case EWRError::Failure_Player_MoveToMap_MC_Same_Map: return L"Failure_Player_MoveToMap_MC_Same_Map"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Map: return L"Failure_Actor_CreateActor_Invalid_Map"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_ActorTID: return L"Failure_Actor_CreateActor_Invalid_ActorTID"; break;
	case EWRError::Failure_Actor_CreateActor_Generate_ActorID: return L"Failure_Actor_CreateActor_Generate_ActorID"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_ActorType: return L"Failure_Actor_CreateActor_Invalid_ActorType"; break;
	case EWRError::Failure_Actor_CreateActor_Not_Exist_User: return L"Failure_Actor_CreateActor_Not_Exist_User"; break;
	case EWRError::Failure_Actor_CreateActor_InitASM: return L"Failure_Actor_CreateActor_InitASM"; break;
	case EWRError::Failure_Actor_CreateActor_EnterMap: return L"Failure_Actor_CreateActor_EnterMap"; break;
	case EWRError::Failure_Actor_CreateActor_SetUpStat: return L"Failure_Actor_CreateActor_SetUpStat"; break;
	case EWRError::Failure_Actor_CreateActor_SetRealmInfo: return L"Failure_Actor_CreateActor_SetRealmInfo"; break;
	case EWRError::Failure_Actor_CreateActor_TableRecordActor: return L"Failure_Actor_CreateActor_TableRecordActor"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoActor: return L"Failure_Actor_CreateActor_Invalid_CreateInfoActor"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoPlayer: return L"Failure_Actor_CreateActor_Invalid_CreateInfoPlayer"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoFellow: return L"Failure_Actor_CreateActor_Invalid_CreateInfoFellow"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoNpc: return L"Failure_Actor_CreateActor_Invalid_CreateInfoNpc"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoInteractionObject: return L"Failure_Actor_CreateActor_Invalid_CreateInfoInteractionObject"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoPortal: return L"Failure_Actor_CreateActor_Invalid_CreateInfoPortal"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoBrick: return L"Failure_Actor_CreateActor_Invalid_CreateInfoBrick"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoSkillObject: return L"Failure_Actor_CreateActor_Invalid_CreateInfoSkillObject"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoDropObject: return L"Failure_Actor_CreateActor_Invalid_CreateInfoDropObject"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoActiveObject: return L"Failure_Actor_CreateActor_Invalid_CreateInfoActiveObject"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoActionProp: return L"Failure_Actor_CreateActor_Invalid_CreateInfoActionProp"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoElevator: return L"Failure_Actor_CreateActor_Invalid_CreateInfoElevator"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoMonorail: return L"Failure_Actor_CreateActor_Invalid_CreateInfoMonorail"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoTardis: return L"Failure_Actor_CreateActor_Invalid_CreateInfoTardis"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_CreateInfoFloatingBoard: return L"Failure_Actor_CreateActor_Invalid_CreateInfoFloatingBoard"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Actor: return L"Failure_Actor_CreateActor_Invalid_Actor"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Player: return L"Failure_Actor_CreateActor_Invalid_Player"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Fellow: return L"Failure_Actor_CreateActor_Invalid_Fellow"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Npc: return L"Failure_Actor_CreateActor_Invalid_Npc"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_IO: return L"Failure_Actor_CreateActor_Invalid_IO"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Portal: return L"Failure_Actor_CreateActor_Invalid_Portal"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Brick: return L"Failure_Actor_CreateActor_Invalid_Brick"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_SO: return L"Failure_Actor_CreateActor_Invalid_SO"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_DropObject: return L"Failure_Actor_CreateActor_Invalid_DropObject"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_AO: return L"Failure_Actor_CreateActor_Invalid_AO"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_ActionProp: return L"Failure_Actor_CreateActor_Invalid_ActionProp"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Elevator: return L"Failure_Actor_CreateActor_Invalid_Elevator"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Monorail: return L"Failure_Actor_CreateActor_Invalid_Monorail"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Tardis: return L"Failure_Actor_CreateActor_Invalid_Tardis"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_FloatingBoard: return L"Failure_Actor_CreateActor_Invalid_FloatingBoard"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Actor: return L"Failure_Actor_CreateActor_Already_Exist_Actor"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player: return L"Failure_Actor_CreateActor_Already_Exist_Player"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Fellow: return L"Failure_Actor_CreateActor_Already_Exist_Fellow"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Npc: return L"Failure_Actor_CreateActor_Already_Exist_Npc"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_IO: return L"Failure_Actor_CreateActor_Already_Exist_IO"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Portal: return L"Failure_Actor_CreateActor_Already_Exist_Portal"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Brick: return L"Failure_Actor_CreateActor_Already_Exist_Brick"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_SO: return L"Failure_Actor_CreateActor_Already_Exist_SO"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_DropObject: return L"Failure_Actor_CreateActor_Already_Exist_DropObject"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_AO: return L"Failure_Actor_CreateActor_Already_Exist_AO"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_ActionProp: return L"Failure_Actor_CreateActor_Already_Exist_ActionProp"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Elevator: return L"Failure_Actor_CreateActor_Already_Exist_Elevator"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Monorail: return L"Failure_Actor_CreateActor_Already_Exist_Monorail"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Tardis: return L"Failure_Actor_CreateActor_Already_Exist_Tardis"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_FloatingBoard: return L"Failure_Actor_CreateActor_Already_Exist_FloatingBoard"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Vehicle: return L"Failure_Actor_CreateActor_Already_Exist_Vehicle"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_PSN: return L"Failure_Actor_CreateActor_Invalid_PSN"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_Name: return L"Failure_Actor_CreateActor_Invalid_Name"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_ActorState: return L"Failure_Actor_CreateActor_Invalid_ActorState"; break;
	case EWRError::Failure_Actor_CreateActor_For_NonPlayer: return L"Failure_Actor_CreateActor_For_NonPlayer"; break;
	case EWRError::Failure_Actor_CreateActor_For_Player: return L"Failure_Actor_CreateActor_For_Player"; break;
	case EWRError::Failure_Actor_CreateActor_SpawnRecord_Is_Null: return L"Failure_Actor_CreateActor_SpawnRecord_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_Derived_SpawnRecord_Is_Null: return L"Failure_Actor_CreateActor_Derived_SpawnRecord_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_Not_Exist_SpawnInfo: return L"Failure_Actor_CreateActor_Not_Exist_SpawnInfo"; break;
	case EWRError::Failure_Actor_CreateActor_ReadyToPlay_EnteredMap_Is_Null: return L"Failure_Actor_CreateActor_ReadyToPlay_EnteredMap_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_ActiveActor: return L"Failure_Actor_CreateActor_Already_Exist_ActiveActor"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player_Socket: return L"Failure_Actor_CreateActor_Already_Exist_Player_Socket"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player_PSN: return L"Failure_Actor_CreateActor_Already_Exist_Player_PSN"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player_AID: return L"Failure_Actor_CreateActor_Already_Exist_Player_AID"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player_Name: return L"Failure_Actor_CreateActor_Already_Exist_Player_Name"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Player_DisconnetPSN: return L"Failure_Actor_CreateActor_Already_Exist_Player_DisconnetPSN"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_SpawnActor: return L"Failure_Actor_CreateActor_Already_Exist_SpawnActor"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component: return L"Failure_Actor_CreateActor_Already_Exist_Component"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Stat: return L"Failure_Actor_CreateActor_Already_Exist_Component_Stat"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Cheat: return L"Failure_Actor_CreateActor_Already_Exist_Component_Cheat"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Inventory: return L"Failure_Actor_CreateActor_Already_Exist_Component_Inventory"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Qeust: return L"Failure_Actor_CreateActor_Already_Exist_Component_Qeust"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Move: return L"Failure_Actor_CreateActor_Already_Exist_Component_Move"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Skill: return L"Failure_Actor_CreateActor_Already_Exist_Component_Skill"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_AI: return L"Failure_Actor_CreateActor_Already_Exist_Component_AI"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_ABState: return L"Failure_Actor_CreateActor_Already_Exist_Component_ABState"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Buff: return L"Failure_Actor_CreateActor_Already_Exist_Component_Buff"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Vehicle: return L"Failure_Actor_CreateActor_Already_Exist_Component_Vehicle"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Currency: return L"Failure_Actor_CreateActor_Already_Exist_Component_Currency"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Chat: return L"Failure_Actor_CreateActor_Already_Exist_Component_Chat"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Reward: return L"Failure_Actor_CreateActor_Already_Exist_Component_Reward"; break;
	case EWRError::Failure_Actor_CreateActor_Already_Exist_Component_Community: return L"Failure_Actor_CreateActor_Already_Exist_Component_Community"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component: return L"Failure_Actor_CreateActor_Init_Component"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Stat: return L"Failure_Actor_CreateActor_Init_Component_Stat"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Cheat: return L"Failure_Actor_CreateActor_Init_Component_Cheat"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Inventory: return L"Failure_Actor_CreateActor_Init_Component_Inventory"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Qeust: return L"Failure_Actor_CreateActor_Init_Component_Qeust"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Move: return L"Failure_Actor_CreateActor_Init_Component_Move"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Skill: return L"Failure_Actor_CreateActor_Init_Component_Skill"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_AI: return L"Failure_Actor_CreateActor_Init_Component_AI"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_ABState: return L"Failure_Actor_CreateActor_Init_Component_ABState"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Buff: return L"Failure_Actor_CreateActor_Init_Component_Buff"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Vehicle: return L"Failure_Actor_CreateActor_Init_Component_Vehicle"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Currency: return L"Failure_Actor_CreateActor_Init_Component_Currency"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Chat: return L"Failure_Actor_CreateActor_Init_Component_Chat"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Reward: return L"Failure_Actor_CreateActor_Init_Component_Reward"; break;
	case EWRError::Failure_Actor_CreateActor_Init_Component_Community: return L"Failure_Actor_CreateActor_Init_Component_Community"; break;
	case EWRError::Failure_Actor_CreateActor_SetupComponentFirst_Base: return L"Failure_Actor_CreateActor_SetupComponentFirst_Base"; break;
	case EWRError::Failure_Actor_CreateActor_SetupComponentFirst_Quest: return L"Failure_Actor_CreateActor_SetupComponentFirst_Quest"; break;
	case EWRError::Failure_Actor_CreateActor_SetupComponentFirst_Inventory: return L"Failure_Actor_CreateActor_SetupComponentFirst_Inventory"; break;
	case EWRError::Failure_Actor_CreateActor_SetupComponentFirst_Currency: return L"Failure_Actor_CreateActor_SetupComponentFirst_Currency"; break;
	case EWRError::Failure_Actor_CreateActor_SetupAutoASM_ActorState_Is_Null: return L"Failure_Actor_CreateActor_SetupAutoASM_ActorState_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_SetupAutoASM_Failed: return L"Failure_Actor_CreateActor_SetupAutoASM_Failed"; break;
	case EWRError::Failure_Actor_CreateActor_Invalid_VehicleState: return L"Failure_Actor_CreateActor_Invalid_VehicleState"; break;
	case EWRError::Failure_Actor_CreateActor_CurVehicleState_Is_Null: return L"Failure_Actor_CreateActor_CurVehicleState_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_SetupAutoVSM_VehicleState_Is_Null: return L"Failure_Actor_CreateActor_SetupAutoVSM_VehicleState_Is_Null"; break;
	case EWRError::Failure_Actor_CreateActor_SetupAutoVSM_Failed: return L"Failure_Actor_CreateActor_SetupAutoVSM_Failed"; break;
	case EWRError::Failure_Actor_ASM_CurActorState_Is_Null: return L"Failure_Actor_ASM_CurActorState_Is_Null"; break;
	case EWRError::Failure_Actor_ASM_Unable_Next_state: return L"Failure_Actor_ASM_Unable_Next_state"; break;
	case EWRError::Failure_Actor_ASM_Is_Not_Alive: return L"Failure_Actor_ASM_Is_Not_Alive"; break;
	case EWRError::Failure_Actor_Unmovable: return L"Failure_Actor_Unmovable"; break;
	case EWRError::Failure_Actor_Destroy_Aready_Destroying: return L"Failure_Actor_Destroy_Aready_Destroying"; break;
	case EWRError::Failure_Actor_Destroy_In_DestroyContainer: return L"Failure_Actor_Destroy_In_DestroyContainer"; break;
	case EWRError::Failure_Actor_AI_Start_Error: return L"Failure_Actor_AI_Start_Error"; break;
	case EWRError::Failure_Actor_Is_Not_Master_Servant_Relationship: return L"Failure_Actor_Is_Not_Master_Servant_Relationship"; break;
	case EWRError::Failure_Actor_Not_Exist_Master: return L"Failure_Actor_Not_Exist_Master"; break;
	case EWRError::Failure_Actor_Not_Exist_Slave: return L"Failure_Actor_Not_Exist_Slave"; break;
	case EWRError::Failure_Actor_Is_Not_My_Master: return L"Failure_Actor_Is_Not_My_Master"; break;
	case EWRError::Failure_Actor_Is_Not_My_Slave: return L"Failure_Actor_Is_Not_My_Slave"; break;
	case EWRError::Failure_Actor_Already_Master: return L"Failure_Actor_Already_Master"; break;
	case EWRError::Failure_Actor_Already_Slave: return L"Failure_Actor_Already_Slave"; break;
	case EWRError::Failure_Actor_Already_Exist_Master: return L"Failure_Actor_Already_Exist_Master"; break;
	case EWRError::Failure_Actor_Already_Exist_Slave: return L"Failure_Actor_Already_Exist_Slave"; break;
	case EWRError::Failure_Actor_Slave_Warp_Position_Is_Invalid: return L"Failure_Actor_Slave_Warp_Position_Is_Invalid"; break;
	case EWRError::Failure_Reconnect_Not_Found_Player: return L"Failure_Reconnect_Not_Found_Player"; break;
	case EWRError::Failure_Lab_UserSequence_Not_InLab: return L"Failure_Lab_UserSequence_Not_InLab"; break;
	case EWRError::Failure_Lab_UserSequence_Already_InLab: return L"Failure_Lab_UserSequence_Already_InLab"; break;
	case EWRError::Failure_Lab_UserSequence_Wrong: return L"Failure_Lab_UserSequence_Wrong"; break;
	case EWRError::Failure_Inventory_Item_Insert_Failed: return L"Failure_Inventory_Item_Insert_Failed"; break;
	case EWRError::Failure_Inventory_Not_Found_Item: return L"Failure_Inventory_Not_Found_Item"; break;
	case EWRError::Failure_Inventory_Already_Exist_Item: return L"Failure_Inventory_Already_Exist_Item"; break;
	case EWRError::Failure_Inventory_Invalid_Item: return L"Failure_Inventory_Invalid_Item"; break;
	case EWRError::Failure_Inventory_Invalid_Value: return L"Failure_Inventory_Invalid_Value"; break;
	case EWRError::Failure_Inventory_Invalid_ItemSerialNumber: return L"Failure_Inventory_Invalid_ItemSerialNumber"; break;
	case EWRError::Failure_Inventory_Invalid_ItemCount: return L"Failure_Inventory_Invalid_ItemCount"; break;
	case EWRError::Failure_Inventory_Invalid_ItemType: return L"Failure_Inventory_Invalid_ItemType"; break;
	case EWRError::Failure_Inventory_Can_Not_Remove_Already_Equipped_Item: return L"Failure_Inventory_Can_Not_Remove_Already_Equipped_Item"; break;
	case EWRError::Failure_Inventory_Not_Equipped_Item: return L"Failure_Inventory_Not_Equipped_Item"; break;
	case EWRError::Failure_Inventory_Already_Equipped_Item: return L"Failure_Inventory_Already_Equipped_Item"; break;
	case EWRError::Failure_Inventory_Invalid_Category: return L"Failure_Inventory_Invalid_Category"; break;
	case EWRError::Failure_Inventory_Can_Not_Remove_Already_Registered_Item: return L"Failure_Inventory_Can_Not_Remove_Already_Registered_Item"; break;
	case EWRError::Failure_Inventory_Invalid_ItemEquipType: return L"Failure_Inventory_Invalid_ItemEquipType"; break;
	case EWRError::Failure_Inventory_Not_Registered_Item: return L"Failure_Inventory_Not_Registered_Item"; break;
	case EWRError::Failure_Inventory_Already_Registered_Item: return L"Failure_Inventory_Already_Registered_Item"; break;
	case EWRError::Failure_Inventory_Invalid_RegistSlotType: return L"Failure_Inventory_Invalid_RegistSlotType"; break;
	case EWRError::Failure_Inventory_Invalid_InventoryCategoryType: return L"Failure_Inventory_Invalid_InventoryCategoryType"; break;
	case EWRError::Failure_Inventory_Lack_Slot_Count: return L"Failure_Inventory_Lack_Slot_Count"; break;
	case EWRError::Failure_Inventory_Interior_Not_Found_Actor: return L"Failure_Inventory_Interior_Not_Found_Actor"; break;
	case EWRError::Failure_Inventory_Interior_Already_Arrange: return L"Failure_Inventory_Interior_Already_Arrange"; break;
	case EWRError::Failure_Inventory_Interior_Failed_Insert_Container: return L"Failure_Inventory_Interior_Failed_Insert_Container"; break;
	case EWRError::Failure_Inventory_Interior_Not_Interior_Item: return L"Failure_Inventory_Interior_Not_Interior_Item"; break;
	case EWRError::Failure_Trigger_Invalid_TransitionNode: return L"Failure_Trigger_Invalid_TransitionNode"; break;
	case EWRError::Failure_Trigger_Process_TriggerNode: return L"Failure_Trigger_Process_TriggerNode"; break;
	case EWRError::Failure_Trigger_Not_Exist_Trigger_Data: return L"Failure_Trigger_Not_Exist_Trigger_Data"; break;
	case EWRError::Failure_Trigger_MovePos_Check_Fail: return L"Failure_Trigger_MovePos_Check_Fail"; break;
	case EWRError::Failure_Trigger_Process_TransitionNode: return L"Failure_Trigger_Process_TransitionNode"; break;
	case EWRError::Failure_Trigger_IsDisableTriggerNode: return L"Failure_Trigger_IsDisableTriggerNode"; break;
	case EWRError::Failure_Trigger_Not_Match_TriggerFlowIndex: return L"Failure_Trigger_Not_Match_TriggerFlowIndex"; break;
	case EWRError::Failure_Trigger_IsUsedTriggerNode: return L"Failure_Trigger_IsUsedTriggerNode"; break;
	case EWRError::Failure_Trigger_Not_Exist_TriggerManager: return L"Failure_Trigger_Not_Exist_TriggerManager"; break;
	case EWRError::Failure_Trigger_Invalid_NodeTID: return L"Failure_Trigger_Invalid_NodeTID"; break;
	case EWRError::Failure_Trigger_Invalid_TriggerNodeType: return L"Failure_Trigger_Invalid_TriggerNodeType"; break;
	case EWRError::Failure_Create_Skill_Task: return L"Failure_Create_Skill_Task"; break;
	case EWRError::Failure_Skill_Skill_Task_Is_Not_Found: return L"Failure_Skill_Skill_Task_Is_Not_Found"; break;
	case EWRError::Failure_Skill_Invalid_SkillTID: return L"Failure_Skill_Invalid_SkillTID"; break;
	case EWRError::Failure_Not_Enough_Skill_CoolTime: return L"Failure_Not_Enough_Skill_CoolTime"; break;
	case EWRError::Failure_Player_Warp_Fail: return L"Failure_Player_Warp_Fail"; break;
	case EWRError::Failure_Hit_Target_Defense: return L"Failure_Hit_Target_Defense"; break;
	case EWRError::Failure_Hit_By_Ignore_Reaction: return L"Failure_Hit_By_Ignore_Reaction"; break;
	case EWRError::Failure_Quest_Progress_Insert_Failed: return L"Failure_Quest_Progress_Insert_Failed"; break;
	case EWRError::Failure_Quest_Complete_Insert_Failed: return L"Failure_Quest_Complete_Insert_Failed"; break;
	case EWRError::Failure_Quest_Task_Insert_Failed: return L"Failure_Quest_Task_Insert_Failed"; break;
	case EWRError::Failure_Quest_Not_Found_Quest: return L"Failure_Quest_Not_Found_Quest"; break;
	case EWRError::Failure_Quest_Not_Found_Quest_Task: return L"Failure_Quest_Not_Found_Quest_Task"; break;
	case EWRError::Failure_Quest_Already_Progress_Quest: return L"Failure_Quest_Already_Progress_Quest"; break;
	case EWRError::Failure_Quest_Already_Complete_Quest: return L"Failure_Quest_Already_Complete_Quest"; break;
	case EWRError::Failure_Quest_Invalid_Quest: return L"Failure_Quest_Invalid_Quest"; break;
	case EWRError::Failure_Quest_Invalid_QuestType: return L"Failure_Quest_Invalid_QuestType"; break;
	case EWRError::Failure_Quest_Invalid_QuestTaskType: return L"Failure_Quest_Invalid_QuestTaskType"; break;
	case EWRError::Failure_Quest_Invalid_QuestState: return L"Failure_Quest_Invalid_QuestState"; break;
	case EWRError::Failure_Quest_Start_Condition_Is_Not_Correct: return L"Failure_Quest_Start_Condition_Is_Not_Correct"; break;
	case EWRError::Failure_Quest_Progress_State_incorrect: return L"Failure_Quest_Progress_State_incorrect"; break;
	case EWRError::Failure_Quest_Can_Not_Completable_State: return L"Failure_Quest_Can_Not_Completable_State"; break;
	case EWRError::Failure_Quest_Can_Not_Receive_Reward_State: return L"Failure_Quest_Can_Not_Receive_Reward_State"; break;
	case EWRError::Failure_Quest_Invalid_Quest_Task_Style: return L"Failure_Quest_Invalid_Quest_Task_Style"; break;
	case EWRError::Failure_Quest_Not_Completable_Task: return L"Failure_Quest_Not_Completable_Task"; break;
	case EWRError::Failure_Quest_Not_Dest_Map: return L"Failure_Quest_Not_Dest_Map"; break;
	case EWRError::Failure_Quest_Not_Dest_Position: return L"Failure_Quest_Not_Dest_Position"; break;
	case EWRError::Failure_Quest_Not_Progress_Quest: return L"Failure_Quest_Not_Progress_Quest"; break;
	case EWRError::Failure_Quest_Not_Complete_Quest: return L"Failure_Quest_Not_Complete_Quest"; break;
	case EWRError::Failure_Quest_Invalid_QuestActionType: return L"Failure_Quest_Invalid_QuestActionType"; break;
	case EWRError::Failure_Quest_Invalid_StartConditionType: return L"Failure_Quest_Invalid_StartConditionType"; break;
	case EWRError::Failure_Quest_Can_Not_Progress_IO_Quest: return L"Failure_Quest_Can_Not_Progress_IO_Quest"; break;
	case EWRError::Failure_Revive_Is_Not_Coma: return L"Failure_Revive_Is_Not_Coma"; break;
	case EWRError::Failure_Revive_Unable_MapType: return L"Failure_Revive_Unable_MapType"; break;
	case EWRError::Failure_Revive_Failed_ReBorn: return L"Failure_Revive_Failed_ReBorn"; break;
	case EWRError::Failure_Revive_Remain_CoolTime_DisputeRevive: return L"Failure_Revive_Remain_CoolTime_DisputeRevive"; break;
	case EWRError::Failure_Revive_Ing: return L"Failure_Revive_Ing"; break;
	case EWRError::Failure_Revive_Failed_Resurrection: return L"Failure_Revive_Failed_Resurrection"; break;
	case EWRError::Failure_Cheat_Wrong_MSG: return L"Failure_Cheat_Wrong_MSG"; break;
	case EWRError::Failure_Cheat_Cannot_Parse: return L"Failure_Cheat_Cannot_Parse"; break;
	case EWRError::Failure_Cheat_Unknown_Command: return L"Failure_Cheat_Unknown_Command"; break;
	case EWRError::Failure_Cheat_The_Number_Of_Parameters_Is_Incorrect: return L"Failure_Cheat_The_Number_Of_Parameters_Is_Incorrect"; break;
	case EWRError::Failure_Cheat_Not_Found_Cheat_Tag: return L"Failure_Cheat_Not_Found_Cheat_Tag"; break;
	case EWRError::Failure_Cheat_Is_Not_Player: return L"Failure_Cheat_Is_Not_Player"; break;
	case EWRError::Failure_Cheat_No_Permission: return L"Failure_Cheat_No_Permission"; break;
	case EWRError::Failure_Cheat_Not_Found_Master: return L"Failure_Cheat_Not_Found_Master"; break;
	case EWRError::Failure_Vehicle_VSM_CurVehicleState_Is_Null: return L"Failure_Vehicle_VSM_CurVehicleState_Is_Null"; break;
	case EWRError::Failure_Vehicle_VSM_Unable_Next_state: return L"Failure_Vehicle_VSM_Unable_Next_state"; break;
	case EWRError::Failure_Vehicle_Already_Exist_Passenger: return L"Failure_Vehicle_Already_Exist_Passenger"; break;
	case EWRError::Failure_Vehicle_Not_Exist_Passenger: return L"Failure_Vehicle_Not_Exist_Passenger"; break;
	case EWRError::Failure_Vehicle_Already_GetOn_Other_Vehicle: return L"Failure_Vehicle_Already_GetOn_Other_Vehicle"; break;
	case EWRError::Failure_Vehicle_Not_Allow_Boarding_State: return L"Failure_Vehicle_Not_Allow_Boarding_State"; break;
	case EWRError::Failure_Vehicle_Does_Not_Allow_NonPlayer: return L"Failure_Vehicle_Does_Not_Allow_NonPlayer"; break;
	case EWRError::Failure_Vehicle_Is_Full: return L"Failure_Vehicle_Is_Full"; break;
	case EWRError::Failure_Vehicle_Tardis_Arrival_And_Current_Map_Is_Same: return L"Failure_Vehicle_Tardis_Arrival_And_Current_Map_Is_Same"; break;
	case EWRError::Failure_Vehicle_Is_Not_Vehicle_Packet: return L"Failure_Vehicle_Is_Not_Vehicle_Packet"; break;
	case EWRError::Failure_Vehicle_Different_VehicleAID: return L"Failure_Vehicle_Different_VehicleAID"; break;
	case EWRError::Failure_Vehicle_Not_On_Board: return L"Failure_Vehicle_Not_On_Board"; break;
	case EWRError::Failure_Vehicle_Is_Not_Vehicle: return L"Failure_Vehicle_Is_Not_Vehicle"; break;
	case EWRError::Failure_Vehicle_Is_Not_Passenger: return L"Failure_Vehicle_Is_Not_Passenger"; break;
	case EWRError::Failure_Vehicle_Seat_Index_Is_Invalid: return L"Failure_Vehicle_Seat_Index_Is_Invalid"; break;
	case EWRError::Failure_Vehicle_Not_Allow_Boarding_SeatIndex: return L"Failure_Vehicle_Not_Allow_Boarding_SeatIndex"; break;
	case EWRError::Failure_Vehicle_Is_Not_Driver: return L"Failure_Vehicle_Is_Not_Driver"; break;
	case EWRError::Failure_Ladder_Moving: return L"Failure_Ladder_Moving"; break;
	case EWRError::Failure_Ladder_Not_Moving: return L"Failure_Ladder_Not_Moving"; break;
	case EWRError::Failure_Social_Already_Talking: return L"Failure_Social_Already_Talking"; break;
	case EWRError::Failure_Social_Not_Talking: return L"Failure_Social_Not_Talking"; break;
	case EWRError::Failure_Social_Already_Dancing: return L"Failure_Social_Already_Dancing"; break;
	case EWRError::Failure_Social_Not_Dancing: return L"Failure_Social_Not_Dancing"; break;
	case EWRError::Failure_Occupy_Invalid_IOAID: return L"Failure_Occupy_Invalid_IOAID"; break;
	case EWRError::Failure_Group_MoveToMap_Empty_Passenger_List: return L"Failure_Group_MoveToMap_Empty_Passenger_List"; break;
	case EWRError::Failure_Cheers_Suggest_Not_EquppedDrink: return L"Failure_Cheers_Suggest_Not_EquppedDrink"; break;
	case EWRError::Failure_Cheers_Answer_Not_EquppedDrink: return L"Failure_Cheers_Answer_Not_EquppedDrink"; break;
	case EWRError::Failure_Cheers_Not_Allow_ActorType: return L"Failure_Cheers_Not_Allow_ActorType"; break;
	case EWRError::Failure_Cheers_Not_NpcJobType_Drinker: return L"Failure_Cheers_Not_NpcJobType_Drinker"; break;
	case EWRError::Failure_Cheers_Suggest_CheersCondition_Suggest: return L"Failure_Cheers_Suggest_CheersCondition_Suggest"; break;
	case EWRError::Failure_Cheers_Suggest_CheersCondition_Answer: return L"Failure_Cheers_Suggest_CheersCondition_Answer"; break;
	case EWRError::Failure_Cheers_Answer_CheersCondition_Suggest: return L"Failure_Cheers_Answer_CheersCondition_Suggest"; break;
	case EWRError::Failure_Cheers_Answer_CheersCondition_Answer: return L"Failure_Cheers_Answer_CheersCondition_Answer"; break;
	case EWRError::Failure_Cheers_Answer_Not_CheersCondition_Answer: return L"Failure_Cheers_Answer_Not_CheersCondition_Answer"; break;
	case EWRError::Failure_Cheers_Answer_Diffence_Suggest_AID: return L"Failure_Cheers_Answer_Diffence_Suggest_AID"; break;
	case EWRError::Failure_Cheers_Answer_Diffence_Suggest_CheersCondition: return L"Failure_Cheers_Answer_Diffence_Suggest_CheersCondition"; break;
	case EWRError::Failure_Currency_Invalid_Value: return L"Failure_Currency_Invalid_Value"; break;
	case EWRError::Failure_Currency_Invalid_Type: return L"Failure_Currency_Invalid_Type"; break;
	case EWRError::Failure_Currency_Value_Overflow: return L"Failure_Currency_Value_Overflow"; break;
	case EWRError::Failure_Currency_Unit_Value_Overflow: return L"Failure_Currency_Unit_Value_Overflow"; break;
	case EWRError::Failure_Currency_Value_Underflow: return L"Failure_Currency_Value_Underflow"; break;
	case EWRError::Failure_Chat_Already_Reserved: return L"Failure_Chat_Already_Reserved"; break;
	case EWRError::Failure_Chat_Not_Reserved_Partner: return L"Failure_Chat_Not_Reserved_Partner"; break;
	case EWRError::Failure_Chat_Invalid_GroupID: return L"Failure_Chat_Invalid_GroupID"; break;
	case EWRError::Failure_Chat_Group_Create_Fail: return L"Failure_Chat_Group_Create_Fail"; break;
	case EWRError::Failure_Chat_Group_Not_Found: return L"Failure_Chat_Group_Not_Found"; break;
	case EWRError::Failure_ChatGroupManager_Is_Null: return L"Failure_ChatGroupManager_Is_Null"; break;
	case EWRError::Failure_Translation_Same_LanguageType: return L"Failure_Translation_Same_LanguageType"; break;
	case EWRError::Failure_Translation_InvalidState: return L"Failure_Translation_InvalidState"; break;
	case EWRError::Failure_VideoChat_Invalid_State: return L"Failure_VideoChat_Invalid_State"; break;
	case EWRError::Failure_VideoChat_NotLoginState: return L"Failure_VideoChat_NotLoginState"; break;
	case EWRError::Failure_VideoChat_Cannot_connect: return L"Failure_VideoChat_Cannot_connect"; break;
	case EWRError::Failure_VideoChat_TheLineIsInUse: return L"Failure_VideoChat_TheLineIsInUse"; break;
	case EWRError::Failure_VideoChat_Timeout: return L"Failure_VideoChat_Timeout"; break;
	case EWRError::Failure_Reward_Item_Insert_Failed: return L"Failure_Reward_Item_Insert_Failed"; break;
	case EWRError::Failure_Reward_Currency_Insert_Failed: return L"Failure_Reward_Currency_Insert_Failed"; break;
	case EWRError::Failure_LifeEvent_Invalid_DialogueActionType: return L"Failure_LifeEvent_Invalid_DialogueActionType"; break;
	case EWRError::Failure_Shop_Invalid_DisplayStandType: return L"Failure_Shop_Invalid_DisplayStandType"; break;
	case EWRError::Failure_Shop_Invalid_Shop_Item: return L"Failure_Shop_Invalid_Shop_Item"; break;
	case EWRError::Failure_Shop_Item_Insert_Failed: return L"Failure_Shop_Item_Insert_Failed"; break;
	case EWRError::Failure_Shop_Invalid_PurchasePrice: return L"Failure_Shop_Invalid_PurchasePrice"; break;
	case EWRError::Failure_Shop_Invalid_SellingPrice: return L"Failure_Shop_Invalid_SellingPrice"; break;
	case EWRError::Failure_Sekai_Invalid_CheatType: return L"Failure_Sekai_Invalid_CheatType"; break;
	case EWRError::Failure_Sekai_Load_Fail: return L"Failure_Sekai_Load_Fail"; break;
	case EWRError::Failure_Sekai_CheckValid_Fail: return L"Failure_Sekai_CheckValid_Fail"; break;
	case EWRError::Failure_Sekai_SendMsg_Fail: return L"Failure_Sekai_SendMsg_Fail"; break;
	case EWRError::Failure_Sekai_Proceeding_Settlement: return L"Failure_Sekai_Proceeding_Settlement"; break;
	case EWRError::Failure_Sekai_DBLoad_Fail: return L"Failure_Sekai_DBLoad_Fail"; break;
	case EWRError::Failure_Sekai_Sekai_Info_Is_Nullptr: return L"Failure_Sekai_Sekai_Info_Is_Nullptr"; break;
	case EWRError::Failure_Sekai_Not_Exist_Info: return L"Failure_Sekai_Not_Exist_Info"; break;
	}
#ifdef USE_CLIENT_ONLY
	return *FString::Printf(TEXT("GetErrorString[%d]"), (int32)e);
#else
	static wchar_t s[256]; _itow_s((int)e, s, 10); return s;
#endif // USE_CLIENT_ONLY
};

